import pandas as pd
import itertools, sys, warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import numpy as np
from pylab import rcParams
import statsmodels.api as sm
from datetime import datetime

class timeSeriesAnalysis:
    def __init__(self, fileName, dataIdentifier="londonCrimes"):
        self.data=pd.read_csv(fileName)
        self.dataIdentifier=dataIdentifier
        self.timeSeries=self.createTimeSeries()
        self.bestParam=((1,1,1),(1,1,1,1))
        self.dataIdentifier=dataIdentifier
    def createTimeSeries(self):
        if self.dataIdentifier=="londonCrimes":
            self.data=self.data[~self.data.value.isin([0])]
            tempData=self.data
            tempData['stamp']=[datetime.strptime('{} {}'.format(x,y), '%Y %m') for x,y in zip(tempData.year, tempData.month)]
            self.data=0 #to free the RAM
            tempData=tempData.drop(['year', 'month'],axis=1)
            tempData=tempData.groupby('stamp')['value'].sum().reset_index()
            tempData=tempData.set_index('stamp')
    
        elif self.dataIdentifier=="londonStopAndSearch":
            tempData=self.data
            tempData['stamp']=[datetime.strptime(''.format(x), "%Y-%m") for x in tempData.date]
            tempData=tempData.drop(['date'], axis=1)
            tempData=tempData.set_index('stamp')

        else:
            raise NameError("This library doesn't currently support the provided data identifier")

        print("Time series created. Access it with instance variable timeSeries. Also set the 'data' to zero to free up some memory, if it's not needed.")
        return tempData    

    
    def plotCrimeRate(self, decomposition=False, aggvalue='value',title="Crime in london", figsize=(15,6)):
        if not decomposition:
            self.timeSeries.plot(figsize=figsize)
            plt.title=title
            plt.show()

        else:
            rcParams['figure.figsize']=figsize
            decomposition=sm.tsa.seasonal_decompose(self.timeSeries, model='additive')
            fig=decomposition.plot()
            plt.show()


    def paramselection(self, log_=False, enforceStationary=False, enforceInvertibility=False):
        """Please initialize the instance variable 'bestParam' if you don't want modelSelection"""
        a = b = c = range(0, 2)
        #import statsmodels.api as sm
        abc = list(itertools.product(a,b,c))
        paramOptions = [(x[0], x[1], x[2], 12) for x in list(itertools.product(a,b,c))]
        first=True
        for param in abc:
            for paramSeasonal in paramOptions:
                try:
                    model=sm.tsa.statespace.SARIMAX(self.timeSeries,
                                                  order=param,
                                                  seasonal_order=paramSeasonal,
                                                  enforce_stationary=enforceStationary, enforce_invertibility=enforceInvertibility)
                    result=model.fit()
                    if log_:
                        print("Params  : {}x{}12 - AIC: {}".format(param, paramSeasonal, result.aic))
                    if first:
                        bestParam=(param, paramSeasonal, result.aic)
                        lowestAIC=result.aic
                    else:
                        if result.aic<lowestAIC:
                            lowestAIC=result.aic
                            self.bestParam=(param, paramSeasonal, lowestAIC)
                except Exception as e:
                    print(e)
                    print('continuing')
                    continue

        print("lowest AIC = {}".format(lowestAIC,))
        print("access the instance variable bestParam for the winner")
       # return (bestParam[:2])
          


    def forecastARIMA(self, diagPlots=True, enforceStationary=False, enforceInvertibility=False):
        model=sm.tsa.statespace.SARIMAX(self.timeSeries,
                                      order=self.bestParam[0],
                                      seasonal_order=self.bestParam[1],
                                      enforce_stationary=enforceStationary,
                                      enforce_invertibility=enforceInvertibility)
        self.results=model.fit()
        print("access the instance variable 'result' for the results")
        #print(results.summary().tables[1])
        if diagPlots:
            self.results.plot_diagnostics(figsize=(20,9))
            plt.show()
        #return results

    def predictForecast(self,splitYear, splitMonth, forecastType=11):
        assert len(str(forecastType))==2, '''Please pass the value '1' for each plot. eg. if you want to plot both the plots, pass 11 (int)'''
        toString=str(self.timeSeries.index[0])[:10]
        predictFromString="{}-{}-01".format(splitYear, splitMonth)

        def plot_(predictions):
            predCI=predictions.conf_int()
            ax=self.timeSeries.plot(label='observed', figsize=(20,10))
            predictions.predicted_mean.plot(ax=ax, label='Forecast')
            ax.fill_between(predCI.index,
                            predCI.iloc[:,0],
                            predCI.iloc[:,1],
                            color='k',
                            alpha=0.3)
            ax.set_xlabel('Years')
            ax.set_ylabel('Crime count')
            plt.legend()
            plt.show()
#predictions are based
        if str(forecastType)[0]=='1':
            pred=self.results.get_prediction(start=pd.to_datetime(predictFromString), dynamic=False)
            plot_(pred)
            
        if str(forecastType)[1]=='1':
            pred=self.results.get_forecast(steps=100)
            plot_(pred)
